{"name":"iOS.TranslateRecipe","tagline":"Xamarin.iOS recipe to translate text from one language and speak it in another","body":"iOS.TranslateRecipe\r\n===================\r\n\r\nXamarin.iOS recipe to translate text from one language and speak it in another\r\n\r\nIntroduction\r\n-------\r\nThis sample shows how to take text in one language, translate it and speak it in another language. The translation is achieved using [Microsoft Translator](http://www.microsoft.com/en-us/translator/). Once the translation is returned the iOS 7 AVSpeechSynthesizer is used to speak utterance. This sample defaults to use English (United States) text and translate it to Spanish; Castilian (Spain). You can select the from and to buttons to change the languages.\r\n\r\n![Combined](https://github.com/dannycabrera/iOS.TranslateRecipe/blob/master/Screenshots/ViewController.png?raw=true)\r\n\r\n[Using sample](https://github.com/dannycabrera/iOS.TranslateRecipe/wiki/Using-sample)\r\n\r\nCode\r\n-------\r\nI am going to break down the code walkthrough in 3 parts iOS 7 Speech, Microsoft Translator and Languages.\r\n\r\n#iOS 7 Speech\r\nThe speech API in iOS 7 is a breeze to work with. There is nothing more than the few lines of code below and telling iOS what text to speak ```translatedText```, the language to use ```to.AppleCode``` and a few other settings such as speech rate rate, volume & pitch.\r\n\r\n```\r\n// Setup speech and speak\r\nvar speechSynthesizer = new AVSpeechSynthesizer ();\r\nvar speechUtterance = new AVSpeechUtterance (translatedText) {\r\n\tRate = AVSpeechUtterance.MaximumSpeechRate/10,\r\n\tVoice = AVSpeechSynthesisVoice.FromLanguage (to.AppleCode),\r\n\tVolume = 0.5f,\r\n\tPitchMultiplier = 1.0f\r\n};\r\nspeechSynthesizer.SpeakUtterance (speechUtterance);\r\n```\r\n\r\n#Microsoft Translator\r\nMost of the code in this sample handles the communication with Microsoft Translator hosted on Azure. \r\n\r\n## Access Token\r\nIn order to make calls to Azure we first need to request a token. The class ```AdmAuthentication.cs``` handles invoking an HTTP POST to get our token. Since tokens expire every 10 minutes a timer is created to trigger a refresh every 9 minutes.\r\n```\r\n// Renew the token every specfied minutes\r\naccessTokenRenewer = new Timer(new TimerCallback(OnTokenExpiredCallback)\r\n\t\t\t                   , this\r\n\t\t\t                   , TimeSpan.FromMinutes(RefreshTokenDuration)\r\n\t\t\t                   , TimeSpan.FromMilliseconds(-1));\r\n```\r\n\r\nThe class AdmAccessToken.cs stores the properties of the requested token we will then use to invoke translation calls.\r\n```\r\npublic class AdmAccessToken\r\n{\r\n\t// The access token that you can use to authenticate you access to the Microsoft Translator API.\r\n\tpublic string access_token { get; set; }\r\n\r\n\t// The format of the access token.\r\n\tpublic string token_type { get; set; }\r\n\r\n\t// The number of seconds for which the access token is valid.\r\n\tpublic string expires_in { get; set; }\r\n\r\n\t// The domain for which this token is valid.\r\n\tpublic string scope { get; set; }\r\n}\r\n```\r\n\r\n## Translate call\r\nMicrosft Translator has different interfaces of which we use the HTTP interface for this sample. The translation is invoked from the ```AdmTranslate.cs``` class. All we need to pass over to Azure is our token, text to translate and the from/to language which then returns an XML string with our translation.\r\n\r\n#Languages\r\nBoth iOS 7 and Microsoft Translator support various languages. Unfortunately, not all languages are supported on both sides so I created a list that both support located in the class ```Languages.cs```.\r\n\r\nEach language code consists of 3 properties:\r\n```\r\n/// <summary>\r\n/// Azure data market translator language code.\r\n/// </summary>\r\n/// <value>The adm code.</value>\r\n/// <remarks>http://msdn.microsoft.com/en-us/library/hh456380.aspx</remarks>\r\npublic string AdmCode { get; set; }\r\n\r\n/// <summary>\r\n/// Apple speech voice code.\r\n/// </summary>\r\n/// <value>The apple code.</value>\r\n/// <remarks>Available from: AVSpeechSynthesisVoice.GetSpeechVoices()</remarks>\r\npublic string AppleCode { get; set; }\r\n\r\n/// <summary>\r\n/// Gets or sets the name of the country.\r\n/// </summary>\r\n/// <value>The name of the country.</value>\r\npublic string CountryName { get; set; }\r\n```\r\n\r\n```\r\npublic static List<Code> GetLanguages()\r\n{\r\n\tvar codes = new List<Code> ();\r\n\tcodes.Add (new Code(\"ar\", \"ar-SA\", \"Arabic (Saudi Arabia)\"));\r\n\tcodes.Add (new Code(\"cs\", \"cs-CZ\", \"Czech (Czech Republic)\"));\r\n\tcodes.Add (new Code(\"da\", \"da-DK\", \"Danish (Denmark)\"));\r\n\tcodes.Add (new Code(\"de\", \"de-DE\", \"German (Germany)\"));\r\n\tcodes.Add (new Code(\"el\", \"el-GR\", \"Greek, Modern (Greece)\"));\r\n\tcodes.Add (new Code(\"en\", \"en-AU\", \"English (Australia)\"));\r\n\tcodes.Add (new Code(\"en\", \"en-GB\", \"English (United Kingdom)\"));\r\n\tcodes.Add (new Code(\"en\", \"en-IE\", \"English (Ireland)\"));\r\n\tcodes.Add (new Code(\"en\", \"en-US\", \"English (United States)\"));\r\n\tcodes.Add (new Code(\"en\", \"en-ZA\", \"English (South Africa)\"));\r\n\tcodes.Add (new Code(\"es\", \"es-ES\", \"Spanish; Castilian (Spain)\"));\r\n\tcodes.Add (new Code(\"es\", \"es-MX\", \"Spanish; Castilian (Mexico)\"));\r\n\tcodes.Add (new Code(\"fi\", \"fi-FI\", \"Finnish (Finland)\"));\r\n\tcodes.Add (new Code(\"fr\", \"fr-CA\", \"French (Canada)\"));\r\n\tcodes.Add (new Code(\"fr\", \"fr-FR\", \"French (France)\"));\r\n\tcodes.Add (new Code(\"hi\", \"hi-IN\", \"Hindi (India)\"));\r\n\tcodes.Add (new Code(\"hu\", \"hu-HU\", \"Hungarian (Hungary)\"));\r\n\tcodes.Add (new Code(\"id\", \"id-ID\", \"Indonesian (Indonesia)\"));\r\n\tcodes.Add (new Code(\"it\", \"it-IT\", \"Italian (Italy)\"));\r\n\tcodes.Add (new Code(\"ja\", \"ja-JP\", \"Japanese (Japan)\"));\r\n\tcodes.Add (new Code(\"ko\", \"ko-KR\", \"Korean (Korea, Republic of)\"));\r\n\tcodes.Add (new Code(\"nl\", \"nl-BE\", \"Dutch (Belgium)\"));\r\n\tcodes.Add (new Code(\"nl\", \"nl-NL\", \"Dutch (Netherlands)\"));\r\n\tcodes.Add (new Code(\"no\", \"no-NO\", \"Norwegian (Norway)\"));\r\n\tcodes.Add (new Code(\"pl\", \"pl-PL\", \"Polish (Poland)\"));\r\n\tcodes.Add (new Code(\"pt\", \"pt-BR\", \"Portuguese (Brazil)\"));\r\n\tcodes.Add (new Code(\"pt\", \"pt-PT\", \"Portuguese (Portugal)\"));\r\n\tcodes.Add (new Code(\"ro\", \"ro-RO\", \"Romanian, Moldavian, Moldovan (Romania)\"));\r\n\tcodes.Add (new Code(\"ru\", \"ru-RU\", \"Russian (Russian Federation)\"));\r\n\tcodes.Add (new Code(\"sk\", \"sk-SK\", \"Slovak (Slovakia)\"));\r\n\tcodes.Add (new Code(\"sv\", \"sv-SE\", \"Swedish (Sweden)\"));\r\n\tcodes.Add (new Code(\"th\", \"th-TH\", \"Thai (Thailand)\"));\r\n\tcodes.Add (new Code(\"tr\", \"tr-TR\", \"Turkish (Turkey)\"));\r\n\tcodes.Add (new Code(\"zh-CHS\", \"zh-CN\", \"Chinese (China)\"));\r\n\tcodes.Add (new Code(\"zh-CHT\", \"zh-HK\", \"Chinese (Hong Kong)\"));\r\n\tcodes.Add (new Code(\"zh-CHT\", \"zh-TW\", \"Chinese (Taiwan, Province of China)\"));\r\n\r\n\treturn codes;\r\n}\r\n```\r\n\r\nNotes\r\n-------\r\n1. Sample requires iOS 7\r\n2. [Setting up Azure Marketplace & Microsoft Translator API](https://github.com/dannycabrera/iOS.TranslateRecipe/wiki/Setting-up-Azure-Marketplace-&-Microsoft-Translator-API)\r\n3. [Using sample](https://github.com/dannycabrera/iOS.TranslateRecipe/wiki/Using-sample)\r\n\r\nMore information available on the [wiki](https://github.com/dannycabrera/iOS.TranslateRecipe/wiki)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}